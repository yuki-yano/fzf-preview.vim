*fzf-preview-vim.txt*

Author:  yuki-yano
License: MIT
Version: 0.1


==============================================================================
CONTENTS                                   *fzf-preview-contents*
    Introduction                           |fzf-preview-introduction|
    Installation                           |fzf-preview-installation|
    Mappings                               |fzf-preview-mappings|
    Commands                               |fzf-preview-commands|
    Deprecated Commands                    |fzf-preview-deprecated-commands|
    Keymap                                 |fzf-preview-keymap|

==============================================================================
INTRODUCTION                              *fzf-preview-introduction*

*fzf-preview* is a Neovim plugin to provide some fzf sources to with preview.
Fzf can be operated using floating window (or any layout).

Requirements:
- Neovim
    https://neovim.io/
- git
    https://git-scm.com/
- fzf
    https://github.com/junegunn/fzf

Optional
- Python3 (Used grep preview)
    https://www.python.org/
    Checked with Python3.6
    Required for FzfPreviewProjectGrep preview script.

- ripgrep (Require FzfPreviewProjectGrep and FzfPreviewDirectoryFiles)
    https://github.com/BurntSushi/ripgrep
    If ripgrep is installed, it will be possible to obtain a faster file list.
    It is also necessary to use the FzfPreviewProjectGrep command.

- neomru.vim (Require FzfPreviewProjectMruFiles and FzfPreviewMruFiles)
    https://github.com/Shougo/neomru.vim
    neomru is a plugin that manages the history of files.
    It does not depend on viminfo. It may be more convenient than oldfiles.

- bat (Add color to the preview)
    https://github.com/sharkdp/bat
    When bat is installed you can highlight the preview and see it.
    If bat is not installed, head will be used

- exa (Use color to the file list)
    https://github.com/ogham/exa
    By installing exa you can use exa instead of ls to color the file list

- vim-devicons (Use devicons)
    https://github.com/ryanoasis/vim-devicons
    vim-devicons can be displayed as fzf candidates

Latest version:
https://github.com/yuki-ycino/fzf-preview.vim

==============================================================================
INSTALLATION                                     *fzf-preview-installation*

Use Dein, vim-plug or any Vim plugin manager of your choice.

If you are using MacOS and installed fzf using Homebrew
suffice:
>
    set  runtimepath+=/usr/local/opt/fzf
    call dein#add('yuki-ycino/fzf-preview.vim')
<

you install fzf as well using Dein

>
    call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 })
    call dein#add('yuki-ycino/fzf-preview.vim')
<

==============================================================================
COMMANDS                                        *fzf-preview-commands*

                                                *:FzfPreviewProjectFiles*
:FzfPreviewProjectFiles
     Select and open git repository files from project file list with fzf
     interface.
     while watching preview.

                                                *:FzfPreviewGitFiles*
:FzfPreviewGitFiles
     Select and open git repository files from git ls-files with fzf interface
     while watching preview.

                                                *:FzfPreviewDirectoryFiles*
:FzfPreviewDirectoryFiles
     Select and open current directory files from ripgrep with fzf interface
     while watching preview.
     Require ripgrep.

                                                *:FzfPreviewGitStatus*
:FzfPreviewGitStatus
     Select files that have been changed with git.
     Use fzf interface while watching git diff preview.

                                                *:FzfPreviewBuffers*
:FzfPreviewBuffers
     Select and open file buffers.

                                                *:FzfPreviewAllBuffers*
:FzfPreviewAllBuffers
     Select and open all buffers(include not file).
     Pass the value to the processor function in the format "buffer {bufnr}""

                                                *:FzfPreviewProjectOldFiles*

:FzfPreviewProjectOldFiles
     Select and open the past open files in the project using fzf.
     The target file is selected from  |v:oldfiles|.

                                                *:FzfPreviewProjectMruFiles*
:FzfPreviewProjectMruFiles
     Select and open the past open files in the project using fzf.
     The target file is selected from  |neomru|.

                                                *:FzfPreviewProjectGrep*
:FzfPreviewProjectGrep
     Search text from the project.
     The retrieved result is displayed in file name, number of lines, preview
     and can be opened with fzf interface.
     Required: |Python3|

                                                *:FzfPreviewBufferTags*
:FzfPreviewBufferTags
     Select from tags of currently open buffer
     The same script as FzfPreviewProjectGrep is used for preview.
     Required: |Python3|

                                                *:FzfPreviewOldFiles*
:FzfPreviewOldFiles
     Select and open the opened file with the fzf interface
     while watching the preview.
     For the target file, see |v:oldfiles|.

                                                *:FzfPreviewMruFiles*
:FzfPreviewMruFiles
     Select and open the opened file with the fzf interface
     while watching the preview.
     For the target file, see |neomru|.

                                                *:FzfPreviewQuickFix*
:FzfPreviewQuickFix
     Select and open the QuickFix item with the fzf interface
     Required: |Python3|

                                                *:FzfPreviewLocationList*
:FzfPreviewLocationList
     Select and open the LocationList item with the fzf interface
     Required: |Python3|

                                                *:FzfPreviewLines*
:FzfPreviewLines
     Select line from current buffer
     Required: |Python3|

                                                *:FzfPreviewJumps*
:FzfPreviewJumps
     Select and open the jumplist
     Required: |Python3|

                                                *:FzfPreviewMarks*
:FzfPreviewMarks
     List marks from the project.
     The retrieved result is displayed in file name, number of lines.
     The same script as FzfPreviewProjectGrep is used for preview.
     Required |Python3|

                                                *:FzfPreviewFromResources*
:FzfPreviewFromResources
     Select a resource and generate a file list.
     From there, select the file using the fzf interface.
     Grep and git status are not supported.

     Resources: [project, git, directory, buffer, project_old,
                 project_mru, old, mru]

==============================================================================
COMMAND OPTIONS                                 *fzf-preview-command-options*

-processors
    Set processor when selecting element with fzf started by this command.
    Value must be a global variable name.
    Variable is dictionary and format is
    same as |g:fzf_preview_custom_default_processors|.

    Most commands are passed a file path to the processor function.
    FzfPreviewAllBuffers will be passed “buffer {bufnr}”

    Value example: let g:foo_processors = {
                   \ '':       function('fzf_preview#resource_processor#edit'),
                   \ 'ctrl-x': function('s:foo_function'),
                   \ }

    Usage example: 'bdelete!' buffers
>
    augroup fzf_preview
      autocmd!
      autocmd User fzf_preview#initialized call s:fzf_preview_settings()
    augroup END

    function! s:fzf_preview_settings() abort
      let g:fzf_preview_buffer_delete_processors = fzf_preview#resource_processor#get_default_processors()
      let g:fzf_preview_buffer_delete_processors['ctrl-x'] = function('s:buffers_delete_from_lines')
    endfunction

    function! s:buffers_delete_from_lines(lines) abort
      for line in a:lines
        let matches = matchlist(line, '^buffer \(\d\+\)$')
        if len(matches) >= 1
          execute 'bdelete! ' . matches[1]
        else
          execute 'bdelete! ' . line
        endif
      endfor
    endfunction

    nnoremap <silent> <Leader>b :<C-u>FzfPreviewBuffers -processors=g:fzf_preview_buffer_delete_processors<CR>
<

-fzf-arg
    Set the arguments to be passed when executing fzf.
    This value is added to the default options.
    Value must be a string without spaces.

    Usage example: Exclude filename with FzfPreviewProjectGrep
>
    nnoremap <Leader>g :<C-u>FzfPreviewProjectGrep -fzf-arg=--nth=3<Space>
<

EXPERIMENTAL: Specifications may change.
-eval-fzf-args
    Set the arguments to be passed when executing fzf.
    Value must be a global variable name.
    Variable is string and format is shell command options.
    This option is experimental.

    Value example: let g:foo_arguments = '--multi --reverse --ansi --bind=ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'

    Usage example: Exclude filename with FzfPreviewProjectGrep
>
    augroup fzf_preview
      autocmd!
      autocmd User fzf_preview#initialized call s:fzf_preview_settings()
    augroup END

    function! s:fzf_preview_settings() abort
      let g:fzf_preview_grep_command_options = fzf_preview#command#get_common_command_options()
      let g:fzf_preview_grep_command_options = g:fzf_preview_grep_command_options . ' --nth=3'
    endfunction

    nnoremap <Leader>g :<C-u>FzfPreviewProjectGrep -eval-fzf-args=g:fzf_preview_grep_command_options<Space>
<

==============================================================================
OPTIONS                                         *fzf-preview-options*

*g:fzf_preview_use_floating_window*
    If this value is 1, display fzf window using Floating Window
    This value is for Neovim

    Default value is 1
    Ref: https://github.com/Blacksuan19/init.nvim


*g:fzf_preview_quit_map*
    If this value is 1, mapping that will safely quit
    in fzf's normal mode and visual mode is added

    Default value is 1


*g:fzf_preview_command*
    Shell command used for fzf preview. The head command is used by default.
    If the bat command is installed, the bat is used by default and
    the preview is syntax highlighted.

    Not installed bat:
        Default value is 'head -100 {-1}'

    Installed bat:
        Default value is 'bat --color=always --style=grid {-1}'


*g:fzf_preview_if_binary_command*
    g:fzf_binary_preview_command is executed if this command succeeds,
    and g:fzf_preview_command is executed if it fails

    Default value is '[[ "$(file --mime {})" =~ binary ]]'


*g:fzf_binary_preview_command*
    Shell command used for binary file preview.
    Since it is heavy to display in text, if there is no particular reason,
    echo etc. substitute.

    Default value is 'echo "{} is a binary file"'


*g:fzf_preview_filelist_command*
    This is the command used to search for files in the project.
    If ripgrep is not included, git ls-files will be used.

    Installed ripgrep:
        Default value is 'rg --files --hidden --follow --no-messages -g \!"* *"'

    Not installed ripgrep:
        Default value is 'git ls-files --exclude-standard'

*g:fzf_preview_git_files_command*
    This is the command used to search for files in the git repository.

    Default value is 'git ls-files --exclude-standard'


*g:fzf_preview_directory_files_command*
    This is the command used to search for files in the current directory.

    Default value is 'rg --files --hidden --follow --no-messages -g \!"* *"'


*g:fzf_preview_git_status_command*
    This is the command used to git status files

    Default value is "git status --short --untracked-files=all | awk '{if (substr($0,2,1) !~ / /) print $2}'"


*g:fzf_preview_grep_cmd*
    This command is used for project grep.
    Recommend using a fast grep command such as ripgrep or ag.
    Interactively grep the specified directory.

    Installed ripgrep:
        Default value is 'rg --line-number --no-heading'

    Not installed ripgrep:
        :ProjectGrepPreview is disabled.


*g:fzf_preview_grep_preview_cmd*
    This command is used for :ProjectGrepPreview. bin/preview.rb is used by
    default. The format of the grep result is "{file}:{line_number}:{text}".
    You can pass another command that post-process the result

    Default value is 'expand("<sfile>:h:h") . "/bin/preview.rb"'


*g:fzf_preview_preview_key_bindings*
    This command determines keyboard shortcuts during an interactive FZF
    session. Options are a string passed directly to fzf's "--bind" option.

    Default value is 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'


*g:fzf_preview_fzf_color_option*
    Specify the color option to be passed to the fzf command.
    Options are a string passed directly to fzf's "--color" option.

    Default value is 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'


*g:fzf_preview_custom_default_processors*
    Set the processors when selecting an element with fzf in dictionary.
    Dictionary format is { 'input key': |Funcref| }
    An empty key corresponds to the return key.
    Default |Funcref| can be get with |fzf_preview#resource_processor#get_default_processors|
    Do not use with g:fzf_preview_*_key_map

    Default value is {}

    Example: {
               '':       function('fzf_preview#resource_processor#edit'),
               'ctrl-x': function('fzf_preview#resource_processor#split'),
               'ctrl-v': function('fzf_preview#resource_processor#vsplit'),
               'ctrl-t': function('fzf_preview#resource_processor#tabedit'),
               'ctrl-q': function('fzf_preview#resource_processor#export_quickfix')
             }


*g:fzf_preview_fzf_preview_window_option*
    Used as fzf preview-window option
    For example, 'up:30%'

    Default value is ''


*g:fzf_preview_filelist_postprocess_command*
    Can execute piped commands before the file list is passed to fzf
    For example, you can add color to the file list by setting 'xargs ls —color' .

    Default value is ''


*g:fzf_preview_use_dev_icons*
    If this value is 1, devicons is used as fzf candidate.

    Default value is 0


*g:fzf_preview_dev_icon_prefix_length*
    Set how many bytes devicon is represented.

    Default value is 2


DEPRECATED: Use g:fzf_preview_custom_default_processors
*g:fzf_preview_split_key_map*
    This map is used when splitting and opening files from fzf.
    Options are a string passed directly to fzf's "--expect" option.

    Default value is 'ctrl-x'


DEPRECATED: Use g:fzf_preview_custom_default_processors
*g:fzf_preview_vsplit_key_map*
    This map is used when vertical splitting and opening files from fzf.
    Options are a string passed directly to fzf's "--expect" option.

    Default value is 'ctrl-v'


DEPRECATED: Use g:fzf_preview_custom_default_processors
*g:fzf_preview_tabedit_key_map*
    This map is used when new tabpage and opening files from fzf.
    Options are a string passed directly to fzf's "--expect" option.

    Default value is 'ctrl-t'


DEPRECATED: Use g:fzf_preview_custom_default_processors
*g:fzf_preview_build_quickfix_key_map*
    This map is used when building QuickFix from fzf.
    Options are a string passed directly to fzf's "--expect" option.

    Default value is 'ctrl-q'


DEPRECATED: Works when floating window is not used
*g:fzf_preview_layout*
    This value is the layout displayed when executing the fzf command.

    Default value is 'top split new'


DEPRECATED: Works when floating window is not used
*g:fzf_preview_rate*
    Calculate the size of the fzf window based on this value.
    In the case of 0.3, windows with 0.3 times the size of
    &lines are generated.

    Default value is 0.3


DEPRECATED: Works when floating window is not used
*g:fzf_full_preview_toggle_key*
    It is a mapping for switching the fzf window to full screen.
    You press this key, the display changes with the value set
    with g:fzf_preview_rate.

    Default value is '<C-s>'

==============================================================================
FUNCTIONS                                       *fzf-preview-functions*

*fzf_preview#resource_processor#get_default_processors*
    Get the initial value of the process executed
    when selecting the element of fzf

    value is {
               '':       function('fzf_preview#resource_processor#edit'),
               'ctrl-x': function('fzf_preview#resource_processor#split'),
               'ctrl-v': function('fzf_preview#resource_processor#vsplit'),
               'ctrl-t': function('fzf_preview#resource_processor#vsplit'),
               'ctrl-q': function('fzf_preview#resource_processor#export_quickfix')
             }


*fzf_preview#resource_processor#get_processors*
    Get the current value of the process executed
    when selecting the element of fzf
    Use in fzf_preview#initialized event.


EXPERIMENTAL: Specifications may change.
*fzf_preview#command#get_common_command_options*
    Get the common value of the passed when executed fzf.
    Use in fzf_preview#initialized event.

    value is: '--multi --reverse --ansi --bind=ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'

==============================================================================
DEFAULT KEYMAP                                  *fzf-preview-keymap*

<C-g>, <Esc>
  - Cancel fzf

<C-x>
  - Open split

<C-v>
  - Open vsplit

<C-t>
  - Open tabedit

<C-q>
  - Build QuickFix

<C-d>
  - Preview page down

<C-u>
  - Preview page up

?
  - Toggle Preview

<C-s> # DEPRECATED
  - Toggle window size of fzf, normal size and full-screen

==============================================================================
EXAMPLE                                         *fzf-preview-mappings*

Here is mapping example.
>
    nnoremap <silent> <Leader>p :<C-u>FzfPreviewProjectFiles<CR>
    nnoremap <silent> <Leader>b :<C-u>FzfPreviewBuffers<CR>
    nnoremap <silent> <Leader>m :<C-u>FzfPreviewProjectOldFiles<CR>
    nnoremap <silent> <Leader>M :<C-u>FzfPreviewOldFiles<CR>
<
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:
